import core from "@actions/core";
import github from "@actions/github";
import fetch from "node-fetch";
import simpleGit from "simple-git";
import fs from "fs";

async function run() {
  const token = core.getInput("github-token");
  const pollinationsApi = core.getInput("pollinations-api");
  const { context } = github;
  const issue = context.payload.issue;

  if (!issue) {
    core.info("No issue found — exiting.");
    return;
  }

  const body = issue.body || "";
  if (!body.startsWith("!pollinations")) {
    core.info("Issue does not start with !pollinations");
    return;
  }

  const prompt = body.replace("!pollinations", "").trim();
  const repoPath = process.cwd();
  const octokit = github.getOctokit(token);
  const { owner, repo } = context.repo;
  const issue_number = issue.number;

  // Comment to indicate processing
  await octokit.rest.issues.createComment({
    owner,
    repo,
    issue_number,
    body: `🤖 Pollinations AI is processing your request: "${prompt}"... please wait.`,
  });

  // --- Step 1: Collect repo context ---
  const files = fs
    .readdirSync(repoPath, { withFileTypes: true })
    .filter(f => f.isFile() && /\.(js|ts|py|html|css|json)$/.test(f.name))
    .map(f => f.name);

  let contextSnippet = "";
  for (const file of files.slice(0, 5)) {
    const content = fs.readFileSync(file, "utf8");
    contextSnippet += `\n// FILE: ${file}\n${content.slice(0, 2000)}\n`;
  }

  // --- Step 2: Pollinations API Call with Retry ---
  let responseText = "";
  for (let attempt = 1; attempt <= 3; attempt++) {
    try {
      const res = await fetch(pollinationsApi, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          model: "openai",
          messages: [
            {
              role: "system",
              content: "You are an AI coder that edits repositories based on GitHub issues.",
            },
            {
              role: "user",
              content: `The user requested:\n${prompt}\n\nHere are some relevant parts of the repo:\n${contextSnippet}\n\nReturn ONLY the modified or new files as JSON like {"filename.js": "new code..."}`,
            },
          ],
        }),
      });

      responseText = await res.text();
      JSON.parse(responseText);
      break;
    } catch (e) {
      if (attempt === 3) {
        await octokit.rest.issues.createComment({
          owner,
          repo,
          issue_number,
          body: `❌ Pollinations API failed after 3 attempts. Error: ${e.message}`,
        });
        throw e;
      }
      await new Promise(r => setTimeout(r, 3000));
    }
  }

  let generatedFiles;
  try {
    generatedFiles = JSON.parse(responseText);
  } catch {
    await octokit.rest.issues.createComment({
      owner,
      repo,
      issue_number,
      body: `⚠️ Pollinations returned invalid JSON:\n\`\`\`\n${responseText.slice(0, 1000)}\n\`\`\``,
    });
    return;
  }

  // --- Step 3: Write and commit changes ---
  for (const [filename, code] of Object.entries(generatedFiles)) {
    fs.writeFileSync(`${repoPath}/${filename}`, code, "utf8");
  }

  const git = simpleGit(repoPath);
  const branchName = `pollinations-ai-${issue_number}`;
  await git.checkoutLocalBranch(branchName);
  await git.add(".");
  await git.commit(`AI update for issue #${issue_number}: ${prompt}`);
  await git.push("origin", branchName);

  // --- Step 4: Open PR ---
  const pr = await octokit.rest.pulls.create({
    owner,
    repo,
    title: `AI-generated PR for issue #${issue_number}`,
    head: branchName,
    base: "main",
    body: `🤖 This pull request was automatically generated by Pollinations AI for issue #${issue_number}.`,
  });

  // --- Step 5: Comment PR link back to issue ---
  await octokit.rest.issues.createComment({
    owner,
    repo,
    issue_number,
    body: `✅ Done! Pollinations AI created a PR: [#${pr.data.number}](${pr.data.html_url}) 🎉`,
  });

  core.info("✅ PR created and linked successfully!");
}

run().catch(err => {
  core.setFailed(err.message);
});
